/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Dashboard;

import CashRegister.ChooseStore;
import CashRegister.CloseRegister;
import CashRegister.OpenRegister;
import CashRegister.RegisterController;
import CashRegister.RegisterHistory;
import Distributor.AddNewDistributor;
import Distributor.DistributorManagement;
import Item.AddNewItem;
import Item.ItemManagement;
import Login.Login;
import Receipt.ReceiptManagement;
import Store.AddNewStore;
import Store.StoreController;
import Store.StoreManagement;
import User.AddNewUser;
import User.ChangeLoginInfo;
import User.User;
import User.UserManagement;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Suad's Laptop
 */
public class MainWindow extends javax.swing.JFrame {

    private final Store.StoreController storeController = new StoreController();
    private User currentUserInfo = null;

    /**
     * Creates new form MainWindow
     *
     * @param currentUser
     * @throws java.sql.SQLException
     */
    public MainWindow(User currentUser) throws SQLException {
        initComponents();
        currentUserInfo = currentUser;
        startup();
        escapeKey();
    }

    private void startup() throws SQLException {
        setExtendedState(JFrame.MAXIMIZED_BOTH);

        ImageIcon icon = new ImageIcon(getClass().getResource("/assets/Menu Icons/store.png"));
        setIconImage(icon.getImage());

        if ("admin".equals(currentUserInfo.getOvlasti()) || "superadmin".equals(currentUserInfo.getOvlasti()) || "vlasnik".equals(currentUserInfo.getOvlasti())) {
            this.setTitle("Administracija preduzeća");
        } else if ("zaposlenik".equals(currentUserInfo.getOvlasti())) {
            this.setTitle(storeController.storeName(Integer.toString(currentUserInfo.getId_maloprodaja())));
            addNewStoreOption.setEnabled(false);
            addNewStoreOption.setVisible(false);
            addNewUserOption.setEnabled(false);
            addNewUserOption.setVisible(false);
        }
    }

    private void escapeKey() {
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = getRootPane().getActionMap();

        Action escapeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int confirmation = JOptionPane.showOptionDialog(
                        rootPane,
                        "Jeste li sigurni da se želite odjaviti?",
                        "Odjavljivanje",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        new String[]{"Da", "Ne"},
                        "Da");

                if (confirmation == JOptionPane.YES_OPTION) {
                    logOutOption.doClick();
                }
            }
        };

        inputMap.put(KeyStroke.getKeyStroke("ESCAPE"), "disposeForm");
        actionMap.put("disposeForm", escapeAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addNewStoreOption = new javax.swing.JMenuItem();
        storeManagementOption = new javax.swing.JMenuItem();
        changePasswordOption = new javax.swing.JMenuItem();
        logOutOption = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        addNewUserOption = new javax.swing.JMenuItem();
        userManagementOption = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        receiptManagementOption = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        addNewItemOption = new javax.swing.JMenuItem();
        itemsManagementOption = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        addNewDistributorOption = new javax.swing.JMenuItem();
        distributorsOption = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        registerOption = new javax.swing.JMenuItem();
        registerHistoryOption = new javax.swing.JMenuItem();
        openRegisterOption = new javax.swing.JMenuItem();
        closeRegisterOption = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Maloprodaja");
        setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        setMinimumSize(new java.awt.Dimension(1080, 800));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 474, Short.MAX_VALUE)
        );

        jMenu1.setText("Maloprodaja");
        jMenu1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        addNewStoreOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        addNewStoreOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        addNewStoreOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Menu Icons/new.png"))); // NOI18N
        addNewStoreOption.setText("Dodaj preduzeće");
        addNewStoreOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewStoreOptionActionPerformed(evt);
            }
        });
        jMenu1.add(addNewStoreOption);

        storeManagementOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        storeManagementOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        storeManagementOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Menu Icons/store.png"))); // NOI18N
        storeManagementOption.setText("Evidencija i upravljanje");
        storeManagementOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeManagementOptionActionPerformed(evt);
            }
        });
        jMenu1.add(storeManagementOption);

        changePasswordOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        changePasswordOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Menu Icons/password.png"))); // NOI18N
        changePasswordOption.setText("Izmjena lozinke");
        changePasswordOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordOptionActionPerformed(evt);
            }
        });
        jMenu1.add(changePasswordOption);

        logOutOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        logOutOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        logOutOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Menu Icons/logout.png"))); // NOI18N
        logOutOption.setText("Odjavite se");
        logOutOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutOptionActionPerformed(evt);
            }
        });
        jMenu1.add(logOutOption);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Zaposlenici");
        jMenu2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        addNewUserOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        addNewUserOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        addNewUserOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Menu Icons/new.png"))); // NOI18N
        addNewUserOption.setText("Dodaj zaposlenika");
        addNewUserOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewUserOptionActionPerformed(evt);
            }
        });
        jMenu2.add(addNewUserOption);

        userManagementOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        userManagementOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        userManagementOption.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/Menu Icons/users.png"))); // NOI18N
        userManagementOption.setText("Evidencija i upravljanje");
        userManagementOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userManagementOptionActionPerformed(evt);
            }
        });
        jMenu2.add(userManagementOption);

        jMenuBar1.add(jMenu2);

        jMenu6.setText("Računi");
        jMenu6.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        receiptManagementOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        receiptManagementOption.setText("Evidencija");
        receiptManagementOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiptManagementOptionActionPerformed(evt);
            }
        });
        jMenu6.add(receiptManagementOption);

        jMenuBar1.add(jMenu6);

        jMenu3.setText("Artikli");
        jMenu3.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        addNewItemOption.setText("Dodaj artikal");
        addNewItemOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewItemOptionActionPerformed(evt);
            }
        });
        jMenu3.add(addNewItemOption);

        itemsManagementOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        itemsManagementOption.setText("Evidencija i upravljanje");
        itemsManagementOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemsManagementOptionActionPerformed(evt);
            }
        });
        jMenu3.add(itemsManagementOption);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Distributeri");
        jMenu4.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        addNewDistributorOption.setText("Dodaj distributera");
        addNewDistributorOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewDistributorOptionActionPerformed(evt);
            }
        });
        jMenu4.add(addNewDistributorOption);

        distributorsOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        distributorsOption.setText("Evidencija i upravljanje");
        distributorsOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distributorsOptionActionPerformed(evt);
            }
        });
        jMenu4.add(distributorsOption);

        jMenuBar1.add(jMenu4);

        jMenu7.setText("Kasa");
        jMenu7.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N

        registerOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        registerOption.setText("Kasa");
        registerOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerOptionActionPerformed(evt);
            }
        });
        jMenu7.add(registerOption);

        registerHistoryOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        registerHistoryOption.setText("Evidencija/Historija");
        registerHistoryOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerHistoryOptionActionPerformed(evt);
            }
        });
        jMenu7.add(registerHistoryOption);

        openRegisterOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        openRegisterOption.setText("Otvori kasu");
        openRegisterOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRegisterOptionActionPerformed(evt);
            }
        });
        jMenu7.add(openRegisterOption);

        closeRegisterOption.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        closeRegisterOption.setText("Zaključi kasu");
        closeRegisterOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeRegisterOptionActionPerformed(evt);
            }
        });
        jMenu7.add(closeRegisterOption);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void logOutOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutOptionActionPerformed
        Login loginFrame = new Login();
        loginFrame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_logOutOptionActionPerformed

    private void storeManagementOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeManagementOptionActionPerformed
        StoreManagement storeManagement = null;
        try {
            storeManagement = new StoreManagement(currentUserInfo, jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(storeManagement).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = storeManagement.getSize();
        storeManagement.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_storeManagementOptionActionPerformed

    private void changePasswordOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordOptionActionPerformed
        ChangeLoginInfo changeLoginInfo = null;
        try {
            changeLoginInfo = new ChangeLoginInfo(currentUserInfo);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(changeLoginInfo).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = changeLoginInfo.getSize();
        changeLoginInfo.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_changePasswordOptionActionPerformed

    private void addNewStoreOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewStoreOptionActionPerformed
        AddNewStore newStoreWindow = null;
        try {
            newStoreWindow = new AddNewStore();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(newStoreWindow).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = newStoreWindow.getSize();
        newStoreWindow.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_addNewStoreOptionActionPerformed

    private void userManagementOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userManagementOptionActionPerformed
        UserManagement userManagement = null;
        try {
            userManagement = new UserManagement(currentUserInfo, jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(userManagement).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = userManagement.getSize();
        userManagement.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_userManagementOptionActionPerformed

    private void addNewUserOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewUserOptionActionPerformed
        AddNewUser addNewUser = null;
        try {
            addNewUser = new AddNewUser(Integer.toString(currentUserInfo.getId_user()), currentUserInfo.getOvlasti());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(addNewUser).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = addNewUser.getSize();
        addNewUser.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_addNewUserOptionActionPerformed

    private void openRegisterOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRegisterOptionActionPerformed
        OpenRegister openRegister = null;
        try {
            openRegister = new OpenRegister(Integer.toString(currentUserInfo.getId_user()), currentUserInfo.getOvlasti(), Integer.toString(currentUserInfo.getId_maloprodaja()), jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(openRegister).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = openRegister.getSize();
        openRegister.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_openRegisterOptionActionPerformed

    private void distributorsOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distributorsOptionActionPerformed
        DistributorManagement distributorManagement = null;
        try {
            distributorManagement = new DistributorManagement(currentUserInfo, jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(distributorManagement).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = distributorManagement.getSize();
        distributorManagement.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_distributorsOptionActionPerformed

    private void registerHistoryOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerHistoryOptionActionPerformed
        RegisterHistory registerHistory = null;
        try {
            registerHistory = new RegisterHistory(Integer.toString(currentUserInfo.getId_user()), currentUserInfo.getOvlasti());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(registerHistory).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = registerHistory.getSize();
        registerHistory.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_registerHistoryOptionActionPerformed

    private void closeRegisterOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeRegisterOptionActionPerformed
        RegisterController registerController = new RegisterController();

        if (currentUserInfo.getOvlasti().equals("zaposlenik")) {
            try {
                if (registerController.isOpen(Integer.toString(currentUserInfo.getId_maloprodaja()))) {
                    int confirmation = JOptionPane.showOptionDialog(
                            rootPane,
                            "Da li ste sigurni da želite zaključiti kasu sada?",
                            "Zaključivanje kase",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            new String[]{"Da", "Ne"},
                            "Da");

                    if (confirmation == JOptionPane.YES_OPTION) {
                        LocalDate date = LocalDate.now();
                        DateTimeFormatter format = DateTimeFormatter.ofPattern("d. MMM. yyyy.");
                        String currentDate = date.format(format);

                        LocalTime time = LocalTime.now();
                        format = DateTimeFormatter.ofPattern("HH:mm");
                        String currentTime = time.format(format);

                        try {
                            if (registerController.closeRegister(currentDate, Integer.toString(currentUserInfo.getId_maloprodaja()), Integer.toString(currentUserInfo.getId_user()), currentTime)) {
                                JOptionPane.showMessageDialog(rootPane, "Uspješno zaključena kasa.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Greška u zakjučena kase.", "Greška", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Greška u zaključena kase.", "Greška", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Kasa je već zaključena.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            CloseRegister closeRegister1 = null;
            try {
                closeRegister1 = new CloseRegister(Integer.toString(currentUserInfo.getId_user()));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
            }
            jDesktopPane1.add(closeRegister1).setVisible(true);
            Dimension desktopSize = jDesktopPane1.getSize();
            Dimension jInternalFrameSize = closeRegister1.getSize();
            closeRegister1.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
        }
    }//GEN-LAST:event_closeRegisterOptionActionPerformed

    private void registerOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerOptionActionPerformed
        ChooseStore chooseStore = null;
        try {
            chooseStore = new ChooseStore(Integer.toString(currentUserInfo.getId_user()), Integer.toString(currentUserInfo.getId_maloprodaja()), currentUserInfo.getOvlasti(), jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(chooseStore).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = chooseStore.getSize();
        chooseStore.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_registerOptionActionPerformed

    private void receiptManagementOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptManagementOptionActionPerformed
        ReceiptManagement receiptManagement = null;
        try {
            receiptManagement = new ReceiptManagement(Integer.toString(currentUserInfo.getId_user()), currentUserInfo.getOvlasti(), jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(receiptManagement).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = receiptManagement.getSize();
        receiptManagement.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_receiptManagementOptionActionPerformed

    private void addNewDistributorOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewDistributorOptionActionPerformed
        AddNewDistributor addNewDistributor = null;
        try {
            addNewDistributor = new AddNewDistributor(currentUserInfo);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(addNewDistributor).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = addNewDistributor.getSize();
        addNewDistributor.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_addNewDistributorOptionActionPerformed

    private void itemsManagementOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemsManagementOptionActionPerformed
        ItemManagement itemManagement = null;
        try {
            itemManagement = new ItemManagement(currentUserInfo, jDesktopPane1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(itemManagement).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = itemManagement.getSize();
        itemManagement.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_itemsManagementOptionActionPerformed

    private void addNewItemOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewItemOptionActionPerformed
        AddNewItem addNewItem = null;
        try {
            addNewItem = new AddNewItem(Integer.toString(currentUserInfo.getId_user()), Integer.toString(currentUserInfo.getId_maloprodaja()));
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
        jDesktopPane1.add(addNewItem).setVisible(true);
        Dimension desktopSize = jDesktopPane1.getSize();
        Dimension jInternalFrameSize = addNewItem.getSize();
        addNewItem.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
    }//GEN-LAST:event_addNewItemOptionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addNewDistributorOption;
    private javax.swing.JMenuItem addNewItemOption;
    private javax.swing.JMenuItem addNewStoreOption;
    private javax.swing.JMenuItem addNewUserOption;
    private javax.swing.JMenuItem changePasswordOption;
    private javax.swing.JMenuItem closeRegisterOption;
    private javax.swing.JMenuItem distributorsOption;
    private javax.swing.JMenuItem itemsManagementOption;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem logOutOption;
    private javax.swing.JMenuItem openRegisterOption;
    private javax.swing.JMenuItem receiptManagementOption;
    private javax.swing.JMenuItem registerHistoryOption;
    private javax.swing.JMenuItem registerOption;
    private javax.swing.JMenuItem storeManagementOption;
    private javax.swing.JMenuItem userManagementOption;
    // End of variables declaration//GEN-END:variables
}
