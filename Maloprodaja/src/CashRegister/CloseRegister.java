/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package CashRegister;

import Store.Store;
import Store.StoreController;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Suad's Laptop
 */
public class CloseRegister extends javax.swing.JInternalFrame {

    private final String currentUserId;
    private final RegisterController registerController = new RegisterController();
    private final StoreController storeController = new StoreController();
    private boolean activated;

    /**
     * Creates new form Deposit
     *
     * @param currentUserId
     * @throws java.sql.SQLException
     */
    public CloseRegister(String currentUserId) throws SQLException {
        this.currentUserId = currentUserId;

        startup();
        escapeKey();
    }

    private void startup() throws SQLException {
        ArrayList<Store> stores = storeController.storesByUser(currentUserId, "");

        int i = 0;
        for (Store store : stores) {
            if (registerController.isOpen(Integer.toString(store.getId_maloprodaja()))) {
                i++;
            }
        }

        if (!activated) {
            initComponents();
            activated = true;
        } else {
            storeInput.removeAllItems();
        }
        
        if (i == 0) {
            JOptionPane.showMessageDialog(rootPane, "Sve kase su zaključene.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
            cancelBtn.doClick();
        }

        for (Store store : stores) {
            if (registerController.isOpen(Integer.toString(store.getId_maloprodaja()))) {
                storeInput.addItem(Integer.toString(store.getId_maloprodaja()) + " - " + storeController.storeName(Integer.toString(store.getId_maloprodaja())));
            }
        }
    }

    private void escapeKey() {
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = getRootPane().getActionMap();

        Action escapeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        };

        inputMap.put(KeyStroke.getKeyStroke("ESCAPE"), "disposeForm");
        actionMap.put("disposeForm", escapeAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel14 = new javax.swing.JPanel();
        cancelBtn = new javax.swing.JButton();
        closeRegisterBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        storeInput = new javax.swing.JComboBox<>();
        closeAllRegisters = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setTitle("Zaključivanje kase");
        setMaximumSize(new java.awt.Dimension(400, 280));
        setMinimumSize(new java.awt.Dimension(400, 280));
        setPreferredSize(new java.awt.Dimension(400, 280));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel14.setMaximumSize(new java.awt.Dimension(400, 28));
        jPanel14.setMinimumSize(new java.awt.Dimension(400, 28));
        jPanel14.setPreferredSize(new java.awt.Dimension(400, 28));
        jPanel14.setLayout(new java.awt.GridBagLayout());

        cancelBtn.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        cancelBtn.setText("Otkaži");
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.setMaximumSize(new java.awt.Dimension(96, 28));
        cancelBtn.setMinimumSize(new java.awt.Dimension(96, 28));
        cancelBtn.setPreferredSize(new java.awt.Dimension(96, 28));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 16);
        jPanel14.add(cancelBtn, gridBagConstraints);

        closeRegisterBtn.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        closeRegisterBtn.setText("Zaključi");
        closeRegisterBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        closeRegisterBtn.setMaximumSize(new java.awt.Dimension(96, 28));
        closeRegisterBtn.setMinimumSize(new java.awt.Dimension(96, 28));
        closeRegisterBtn.setPreferredSize(new java.awt.Dimension(96, 28));
        closeRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeRegisterBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        jPanel14.add(closeRegisterBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 16, 0);
        getContentPane().add(jPanel14, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel2.setText("Maloprodajni objekat");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        storeInput.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        storeInput.setMaximumSize(new java.awt.Dimension(150, 28));
        storeInput.setMinimumSize(new java.awt.Dimension(150, 28));
        storeInput.setPreferredSize(new java.awt.Dimension(150, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 16, 0);
        getContentPane().add(storeInput, gridBagConstraints);

        closeAllRegisters.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        closeAllRegisters.setText("Zaključi sve otvorene kase");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(closeAllRegisters, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void closeRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeRegisterBtnActionPerformed
        String newStoreId = (String) storeInput.getSelectedItem();
        LocalDate date = LocalDate.now();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("d. MMM. yyyy.");
        String currentDate = date.format(format);

        LocalTime time = LocalTime.now();
        format = DateTimeFormatter.ofPattern("HH:mm");
        String currentTime = time.format(format);

        if (closeAllRegisters.isSelected()) {
            int confirmation = JOptionPane.showOptionDialog(
                    rootPane,
                    "Da li ste sigurni da želite zaključiti sve otvorene kase?",
                    "Zaključivanje svih kasa",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new String[]{"Da", "Ne"},
                    "Ne");

            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    if(registerController.closeAllRegisters(currentDate, currentUserId, currentTime)) {
                        JOptionPane.showMessageDialog(rootPane, "Uspješno zaključene sve kase.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                        cancelBtn.doClick();
                    } else {
                        SQLException ex = new SQLException();
                        throw ex;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(rootPane, "Greška u zaključivanju svih kasa.", "Greška", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            try {
                if (registerController.isOpen(newStoreId.substring(0, newStoreId.indexOf(" - ")))) {
                    int confirmation = JOptionPane.showOptionDialog(
                            rootPane,
                            "Da li ste sigurni da želite zaključiti kasu sada?",
                            "Zaključivanje kase",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            new String[]{"Da", "Ne"},
                            "Da");

                    if (confirmation == JOptionPane.YES_OPTION) {
                        try {
                            if (registerController.closeRegister(currentDate, newStoreId.substring(0, newStoreId.indexOf(" - ")), currentUserId, currentTime)) {
                                JOptionPane.showMessageDialog(rootPane, "Uspješno zaključena kasa.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                                startup();
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Greška u zaključivanju kase.", "Greška", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(rootPane, "Greška u zaključivanju kase.", "Greška", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Kasa je već zaključena.", "Greška", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_closeRegisterBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JCheckBox closeAllRegisters;
    private javax.swing.JButton closeRegisterBtn;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JComboBox<String> storeInput;
    // End of variables declaration//GEN-END:variables
}
