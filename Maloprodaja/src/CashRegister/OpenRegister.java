/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package CashRegister;

import Store.Store;
import Store.StoreController;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Suad's Laptop
 */
public class OpenRegister extends javax.swing.JInternalFrame {

    private final String currentUserId;
    private String currentStoreId;
    private final String currentUserPrivilege;
    private final JDesktopPane desktopPane;
    private final Register register = new Register();
    private final RegisterController registerController = new RegisterController();
    private final StoreController storeController = new StoreController();
    private boolean activated = false;

    /**
     * Creates new form Deposit
     *
     * @param currentUserId
     * @param privilege
     * @param currentStoreId
     * @param desktopPane
     * @throws java.sql.SQLException
     */
    public OpenRegister(String currentUserId, String privilege, String currentStoreId, JDesktopPane desktopPane) throws SQLException {
        this.currentUserId = currentUserId;
        this.currentStoreId = currentStoreId;
        this.currentUserPrivilege = privilege;
        this.desktopPane = desktopPane;
        startup();
        escapeKey();
    }

    private void startup() throws SQLException {
        if (currentUserPrivilege.equals("zaposlenik")) {
            if (registerController.isOpen(currentStoreId)) {
                if (!activated) {
                    JOptionPane.showMessageDialog(rootPane, "Kasa je već otvorena.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                }
                cancelBtn.doClick();
            }

            if (!activated) {
                initComponents();
                activated = true;
            }

            storeInput.setEnabled(false);
            storeInput.setVisible(false);
            jLabel2.setEnabled(false);
            jLabel2.setVisible(false);
        } else {
            ArrayList<Store> stores = storeController.storesByUser(currentUserId, "");

            int i = 0;
            for (Store store : stores) {
                if (!registerController.isOpen(Integer.toString(store.getId_maloprodaja()))) {
                    i++;
                }
            }

            if (i == 0) {
                if (!activated) {
                    JOptionPane.showMessageDialog(rootPane, "Sve kase su otvorene.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                }
                cancelBtn.doClick();
            }

            if (!activated) {
                initComponents();
                activated = true;
            } else {
                storeInput.removeAllItems();
            }

            i = 0;
            int index = 0;
            for (Store store : stores) {
                if (!registerController.isOpen(Integer.toString(store.getId_maloprodaja()))) {
                    storeInput.addItem(Integer.toString(store.getId_maloprodaja()) + " - " + storeController.storeName(Integer.toString(store.getId_maloprodaja())));
                    if (Integer.toString(store.getId_maloprodaja()).equals(currentStoreId)) {
                        index = i;
                    }
                    i++;
                }
            }
            storeInput.setSelectedIndex(index);
        }
    }

    private void escapeKey() {
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = getRootPane().getActionMap();

        Action escapeAction = new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        };

        inputMap.put(KeyStroke.getKeyStroke("ESCAPE"), "disposeForm");
        actionMap.put("disposeForm", escapeAction);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        depositValue = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        cancelBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        storeInput = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setTitle("Otvaranje kase");
        setMaximumSize(new java.awt.Dimension(400, 280));
        setMinimumSize(new java.awt.Dimension(400, 280));
        setPreferredSize(new java.awt.Dimension(400, 280));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel1.setText("Iznos dnevnog depozita");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        getContentPane().add(jLabel1, gridBagConstraints);

        depositValue.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        depositValue.setMaximumSize(new java.awt.Dimension(150, 28));
        depositValue.setMinimumSize(new java.awt.Dimension(150, 28));
        depositValue.setPreferredSize(new java.awt.Dimension(150, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 16, 0);
        getContentPane().add(depositValue, gridBagConstraints);

        jPanel14.setMaximumSize(new java.awt.Dimension(400, 28));
        jPanel14.setMinimumSize(new java.awt.Dimension(400, 28));
        jPanel14.setPreferredSize(new java.awt.Dimension(400, 28));
        jPanel14.setLayout(new java.awt.GridBagLayout());

        cancelBtn.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        cancelBtn.setText("Otkaži");
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.setMaximumSize(new java.awt.Dimension(96, 28));
        cancelBtn.setMinimumSize(new java.awt.Dimension(96, 28));
        cancelBtn.setPreferredSize(new java.awt.Dimension(96, 28));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 16);
        jPanel14.add(cancelBtn, gridBagConstraints);

        addBtn.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        addBtn.setText("Dodaj");
        addBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addBtn.setMaximumSize(new java.awt.Dimension(96, 28));
        addBtn.setMinimumSize(new java.awt.Dimension(96, 28));
        addBtn.setPreferredSize(new java.awt.Dimension(96, 28));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 0);
        jPanel14.add(addBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 16, 0);
        getContentPane().add(jPanel14, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        jLabel2.setText("Maloprodajni objekat");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        storeInput.setFont(new java.awt.Font("Poppins", 0, 12)); // NOI18N
        storeInput.setMaximumSize(new java.awt.Dimension(150, 28));
        storeInput.setMinimumSize(new java.awt.Dimension(150, 28));
        storeInput.setPreferredSize(new java.awt.Dimension(150, 28));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 16, 0);
        getContentPane().add(storeInput, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        double deposit = 0;
        if (!currentUserPrivilege.equals("zaposlenik")) {
            String storeId = (String) storeInput.getSelectedItem();
            currentStoreId = storeId.substring(0, storeId.indexOf(" - "));
        }

        LocalDate date = LocalDate.now();
        DateTimeFormatter format = DateTimeFormatter.ofPattern("d. MMM. yyyy.");
        String currentDate = date.format(format);

        try {
            if (!registerController.isOpen(currentStoreId)) {
                if (depositValue.getText().isEmpty()) {
                    int confirmation = JOptionPane.showOptionDialog(
                            rootPane,
                            "Da li želite otvoriti kasu bez vrijednosti depozita?",
                            "Otvaranje kase bez depozita",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            new String[]{"Da", "Ne"},
                            "Ne");

                    if (confirmation == JOptionPane.YES_OPTION) {
                        deposit = 0;
                    }
                } else {
                    deposit = Double.parseDouble(depositValue.getText());
                }
                if (!registerController.wasClosedToday(currentDate, currentStoreId)) {
                    if (deposit >= 0 && Math.round((deposit - (long) deposit) * 100) % 5 == 0) {
                        LocalTime time = LocalTime.now();
                        format = DateTimeFormatter.ofPattern("HH:mm");
                        String currentTime = time.format(format);

                        register.setDatum(currentDate);
                        register.setId_maloprodaja(Integer.parseInt(currentStoreId));
                        register.setVrijeme_otvaranja(currentTime);
                        register.setId_zaposlenik_otvaranja(Integer.parseInt(currentUserId));
                        register.setDepozit(deposit);
                        register.setId_zaposlenik_zatvaranja(0);
                        register.setPromet(0);
                        register.setVrijeme_zatvaranja("-");

                        if (registerController.openRegister(register)) {
                            JOptionPane.showMessageDialog(rootPane, "Uspješno otvorena kasa za depozitom od " + Double.toString(deposit) + " KM.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                            CashRegister cashRegister = null;
                            try {
                                cashRegister = new CashRegister(currentUserId, currentStoreId);
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
                            }
                            desktopPane.add(cashRegister).setVisible(true);
                            Dimension desktopSize = desktopPane.getSize();
                            Dimension jInternalFrameSize = cashRegister.getSize();
                            cashRegister.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
                            cancelBtn.doClick();
                        } else {
                            JOptionPane.showMessageDialog(rootPane, "Greška u otvaranju kase!", "Greška", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Nije unesena ispravna vrijednost depozita.", "Greška", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    int confirmation = JOptionPane.showOptionDialog(
                            rootPane,
                            "Kasa je već zaključena za danas, želite li poništiti zaključivanje i postaviti trenutni depozit?",
                            "Zaključivanje kase",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            new String[]{"Da", "Ne"},
                            "Ne");

                    if (confirmation == JOptionPane.YES_OPTION) {
                        if (deposit >= 0 && Math.round((deposit - (long) deposit) * 100) % 5 == 0) {
                            if (registerController.reopenRegister(currentDate, currentStoreId, deposit)) {
                                JOptionPane.showMessageDialog(rootPane, "Zaključivanje je uspješno poništeno i postavljena je nova vrijednost depozita.", "Obavijest", JOptionPane.INFORMATION_MESSAGE);
                                CashRegister cashRegister = null;
                                try {
                                    cashRegister = new CashRegister(currentUserId, currentStoreId);
                                } catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(rootPane, "Greška u pribavljanju podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
                                }
                                desktopPane.add(cashRegister).setVisible(true);
                                Dimension desktopSize = desktopPane.getSize();
                                Dimension jInternalFrameSize = cashRegister.getSize();
                                cashRegister.setLocation((desktopSize.width - jInternalFrameSize.width) / 2, 32);
                                cancelBtn.doClick();
                            } else {
                                JOptionPane.showMessageDialog(rootPane, "Greška u poništavanju zaključivanja kase.", "Greška", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Kasa je već otvorena.", "Greška", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Niste unijeli broj.", "Greška", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "Greška prilikom unosa u bazu podataka.", "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField depositValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JComboBox<String> storeInput;
    // End of variables declaration//GEN-END:variables
}
